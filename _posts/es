安装配置
//cluster.name: my-application
//node.name: node-1
//path.data: /path/to/data
//path.logs: /path/to/logs
//network.host: 0.0.0.0
//http.port: 9200
//cluster.initial_master_nodes: ["node-1"]
//

postman批量创建索引

<?php
require 'vendor/autoload.php';

use Elasticsearch\ClientBuilder;

$client = ClientBuilder::create()->setHosts(['10.160.193.43'])->build();

$params = [
	'index' => "es_index",  //索引名（相当于mysql的数据库）
	'body' => [
		'settings' => [
			'number_of_shards' => 2,  #分片数
			'number_of_replicas' => 0,
		],
		'mappings' => [
			'properties' => [ //文档类型设置（相当于mysql的数据类型）
				'product_id' => [
					'type' => 'integer',
				],
				'title' => [
					'type' => 'text'
				],
				'long_title' => [
					'type' => 'text'
				],
				'sku' => [
					'type' => 'text'
				],
				'money' => [
					'type' => 'integer'
				],
				'sales' => [
					'type' => 'integer'
				],
				'created_at' => [
					'type' => 'date',
					'format' => 'yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis',
				],
				'updated_at' => [
					'type' => 'date',
					'format' => 'yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || epoch_millis',
				],
			]
		]
	]
];
try {
	echo '创建一个索引' . PHP_EOL;
        //创建库索引
        $response = $client->indices()->create($params);
        print_r($response);die();

} catch (Exception $e) {
    echo $e->getMessage();
}

curl -X GET http://127.0.0.1:9200/es_index?pretty

http://10.160.193.43:9200/linzhi

{
    "settings":{
        "number_of_shards":3,
        "number_of_replicas":2
    },
    "mappings":{
        "properties":{
            "create_time":{
                "type":"long"
            },
            "product_name":{
                "type":"text"
            },
			"cover_pic":{
                "type":"text"
            },
			"sku":{
                "type":"text"
            },
        }
    }
}


foreach( $data as $k=>$v ) {
	$params = [
		'index' => 'linzhi',
		'type' => '_doc',
		'id' => $v['code'], #可以手动指定id，也可以不指定随机生成
		'body' => [
			'product_name' => $v['product_name'],
			'cover_pic' => $v['cover_pic'],
			'sku' => $v['code'],
			'create_time' => (int)$v['create_time'],
			'skus'    => $skus_arr
		]
	];
	try {
		$res = $client->index($params);
		print_r($res);
		echo "当前同步到第".$k.PHP_EOL;
	} catch (Exception $e) {
		die("同步失败");
	}
}

<?php
require 'vendor/autoload.php';

use Elasticsearch\ClientBuilder;
$page    = isset($_GET['page'])?$_GET['page']:1;
$keyword    = isset($_GET['keyword'])?$_GET['keyword']:"";
$perPage = 20;

$client = ClientBuilder::create()->setHosts(['10.160.193.43'])->build();

$params = [
    'index' => 'linzhi',
    'type' => '_doc',
    'body' => [
		'from' => ($page - 1) * $perPage,
		'size' => $perPage,
		"sort"=>[
		  ["create_time"=> ["order" => "asc"]]
		],
       'query'=>[  //搜索关键字
			'bool' => [
				'should' => [
					[ 'match' => [ 'product_name' => [
						'query' => $keyword,
						'boost' => 3, // 权重大
					]]],
					[ 'match' => [ 'sku' => [
						'query' => $keyword,
						'boost' => 2,
					]]],
					[ 'match' => [ 'skus' => [
						'query' => $keyword,
						'boost' => 1,
					]]]
				]
			]
		],
	
		'highlight' => [
			'pre_tags' => ["<font color='red'>"],
			'post_tags' => ["</font>"],
			'fields' => [
				"product_name" => new \stdClass()
			]
		]
    ],
];

try {
	$response = $client->search($params);
	print_r($response);die();
} catch (Exception $e) {
    echo $e->getMessage();
}

<?php
namespace app\index\controller;
require '../vendor/autoload.php';
use Elasticsearch\ClientBuilder;
class Search
{
    private $client;
    // 构造函数
    public function __construct()
    {
        $params = array(
            '127.0.0.1:9200'
        );
        $this->client = ClientBuilder::create()->setHosts($params)->build();
    }
 
    // 创建索引
    public function index() { // 只能创建一次
 
        $r = $this->delete_index();
 
        $r = $this->create_index();  //1.创建索引
 
        $r = $this->create_mappings(); //2.创建文档模板
 
 
        $r = $this->get_mapping();
 
 
        $docs = [];
        $docs[] = ['id'=>1,'name'=>'小明','profile'=>'我做的ui界面强无敌。','age'=>23];
        $docs[] = ['id'=>2,'name'=>'小张','profile'=>'我的php代码无懈可击。','age'=>24];
        $docs[] = ['id'=>3,'name'=>'小王','profile'=>'C的生活，快乐每一天。','age'=>29];
        $docs[] = ['id'=>4,'name'=>'小赵','profile'=>'就没有我做不出的前端页面。','age'=>26];
        $docs[] = ['id'=>5,'name'=>'小吴','profile'=>'php是最好的语言。','job'=>21];
        $docs[] = ['id'=>6,'name'=>'小翁','profile'=>'别烦我，我正在敲bug呢！','age'=>25];
        $docs[] = ['id'=>7,'name'=>'小杨','profile'=>'为所欲为，不行就删库跑路','age'=>27];
 
        foreach ($docs as $k => $v) {
            $r = $this->add_doc($v['id'],$v);   //3.添加文档
        }
 
        $r = $this->search_doc("删库 别烦我");  //4.搜索结果
    }
 
    // 创建索引
    public function create_index($index_name = 'test_ik') { // 只能创建一次
        $params = [
            'index' => $index_name,
            'body' => [
                'settings' => [
                    'number_of_shards' => 5,
                    'number_of_replicas' => 0
                ]
            ]
        ];
 
        try {
            return $this->client->indices()->create($params);
        } catch (Elasticsearch\Common\Exceptions\BadRequest400Exception $e) {
            $msg = $e->getMessage();
            $msg = json_decode($msg,true);
            return $msg;
        }
    }
 
    // 删除索引
    public function delete_index($index_name = 'test_ik') {
        $params = ['index' => $index_name];
        $response = $this->client->indices()->delete($params);
        return $response;
    }
 
    // 创建文档模板
    public function create_mappings($type_name = 'users',$index_name = 'test_ik') {
 
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'body' => [
                $type_name => [
                    '_source' => [
                        'enabled' => true
                    ],
                    'properties' => [
                        'id' => [
                            'type' => 'integer', // 整型
                            'index' => 'not_analyzed',
                        ],
                        'name' => [
                            'type' => 'string', // 字符串型
                            'index' => 'analyzed', // 全文搜索
                            'analyzer' => 'ik_max_word'
                        ],
                        'profile' => [
                            'type' => 'string',
                            'index' => 'analyzed',
                            'analyzer' => 'ik_max_word'
                        ],
                        'age' => [
                            'type' => 'integer',
                        ],
                    ]
                ]
            ]
        ];
 
        $response = $this->client->indices()->putMapping($params);
        return $response;
    }
 
    // 查看映射
    public function get_mapping($type_name = 'users',$index_name = 'test_ik') {
        $params = [
            'index' => $index_name,
            'type' => $type_name
        ];
        $response = $this->client->indices()->getMapping($params);
        return $response;
    }
 
    // 添加文档
    public function add_doc($id,$doc,$index_name = 'test_ik',$type_name = 'users') {
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'id' => $id,
            'body' => $doc
        ];
 
        $response = $this->client->index($params);
        return $response;
    }
 
    // 判断文档存在
    public function exists_doc($id = 1,$index_name = 'test_ik',$type_name = 'users') {
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'id' => $id
        ];
 
        $response = $this->client->exists($params);
        return $response;
    }
 
 
    // 获取文档
    public function get_doc($id = 1,$index_name = 'test_ik',$type_name = 'users') {
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'id' => $id
        ];
 
        $response = $this->client->get($params);
        return $response;
    }
 
    // 更新文档
    public function update_doc($id = 1,$index_name = 'test_ik',$type_name = 'users') {
        // 可以灵活添加新字段,最好不要乱添加
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'id' => $id,
            'body' => [
                'doc' => [
                    'name' => '大王'
                ]
            ]
        ];
 
        $response = $this->client->update($params);
        return $response;
    }
 
    // 删除文档
    public function delete_doc($id = 1,$index_name = 'test_ik',$type_name = 'users') {
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'id' => $id
        ];
 
        $response = $this->client->delete($params);
        return $response;
    }
 
    // 查询文档 (分页，排序，权重，过滤)
    public function search_doc($keywords = "运维",$index_name = "test_ik",$type_name = "users",$from = 0,$size = 2) {
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'body' => [
                'query' => [
                    'bool' => [
                        'should' => [
                            [ 'match' => [ 'profile' => [
                                'query' => $keywords,
                                'boost' => 3, // 权重大
                            ]]],
                            [ 'match' => [ 'name' => [
                                'query' => $keywords,
                                'boost' => 2,
                            ]]],
                        ],
                    ],
                ],
                'sort' => ['age'=>['order'=>'desc']]
                , 'from' => $from, 'size' => $size
            ]
        ];
 
        $results = $this->client->search($params);
        return $results;
    }
 
}


<?php
/**
 * Created by PhpStorm.
 * User: sogubaby
 * Date: 2018/12/27
 * Time: 10:33 AM
 */
namespace app\api\controller;
use Elasticsearch\ClientBuilder;

class Elasticsearch extends Base
{
    //配置
    private $config = [
        'hosts' => ['http://127.0.0.1:9200']
    ];
    private $client;

    public function __construct()
    {
        $this->client = ClientBuilder::create()->setHosts($this->config['hosts'])->build();
    }

    /**
     * 创建索引
     */
    public function createIndex($shards = 1 , $replicas = 0)
    {
        $params = [];
        $params['index']  = 'my_index';
        $params['body'] = [
            'settings' => [
                'number_of_shards' => $shards,     //数据分片数，默认为5，有时候设置为3 (非动态设置,不能在线修改)
                'number_of_replicas' => $replicas,   //数据备份数，如果只有一台机器，设置为0
                'refresh_interval' => -1
            ]
        ];
        $res = $this->client->indices()->create($params);
        halt($res);
    }

    /**
     * 更改索引配置
     */
    public function putSettings()
    {
        $params = [
            'index' => 'xiaochuan',
            'body' => [
                'settings' => [
                    'number_of_replicas' => 3,
                    'refresh_interval' => -1
                ]
            ]
        ];

        //可以在线改所有配置的参数，number_of_shards不可以在线改
        $res = $this->client->indices()->putSettings($params);
        halt($res);
    }
    /**
     * 获取索引配置参数
     */
    public function getSettings($params)
    {
        # 单个获取条件写法
        $params['index'] = 'xiaochuan';
        # 多个获取条件写法
        //$params['index'] = ['xiaochuan', 'test_index'];
        $res = $this->client->indices()->getSettings($params);
        halt($res);

    }

    /**
     * 更改或增加一个索引的映射
     */
    public function putMapping()
    {
        $params = [
            'index' => 'tool_case_articles',
            'type' => 'my_type2',
            'body' => [
                'my_type2' => [
                    '_source' => [
                        'enabled' => true
                    ],
                    'properties' => [
                        'first_name' => [
                            'type' => 'string',
                            'analyzer' => 'standard'
                        ],
                        'age' => [
                            'type' => 'integer'
                        ]
                    ]
                ]
            ]
        ];

        $res = $this->client->indices()->putMapping($params);
        halt($res);
    }
    /**
     * 获取一个索引和类型的映射细节
     */
    public function getMapping()
    {
        #  获取所有索引和类型的映射
        $res = $this->client->indices()->getMapping();


        #  获取索引为：xiaochuan的映射
        $params['index'] = 'xiaochuan';
        $res = $this->client->indices()->getMapping($params);

        #  获取类型为：cat的映射
        $params['type'] = 'cat';
        $res = $this->client->indices()->getMapping($params);

        #  获取（索引为：xiaochuan和 类型为：cat）的映射
        $params['index'] = 'xiaochuan';
        $params['type']  = 'cat';
        $res = $this->client->indices()->getMapping($params);

        #  获取索引为：xiaochuan和test_index的映射
        $params['index'] = ['xiaochuan', 'test_index'];
        $res = $this->client->indices()->getMapping($params);

        halt($res);
    }

    /**
     * 索引一个文档
     * 说明：索引没有被创建时会自动创建索引
     */
    public function addOne()
    {
        $params = [];
        $params['index'] = 'xiaochuan';
        $params['type']  = 'cat';
        $params['id']  = '20180407001';  # 不指定就是es自动分配
        $params['body']  = array('name' => '小川编程');
        $res = $this->client->index($params);
        halt($res);
    }
    /**
     * 索引多个文档
     * 说明：索引没有被创建时会自动创建索引
     */
    public function addAll()
    {
        $params = [];
        for($i = 1; $i < 21; $i++) {
            $params['body'][] = [
                'index' => [
                    '_index' => 'test_index'.$i,
                    '_type'  => 'cat_test',
                    '_id'    => $i,
                ]
            ];
            $params['body'][] = [
                'name' => '小川编程'.$i,
                'content' => '内容'.$i
            ];
        }

        $res = $this->client->bulk($params);
        halt($res);
    }
    /**
     * 获取一个文档
     */
    public function getOne()
    {
        $params = [];
        $params['index'] = 'xiaochuan';
        $params['type']  = 'cat';
        $params['id']    = '20180407001';
        $res = $this->client->get($params);
        halt($res);

    }
    /**
     * 判断文档存在
     */
    public function exists_doc($id = 1,$index_name = 'test_ik',$type_name = 'goods') {
        $params = [
            'index' => $index_name,
            'type' => $type_name,
            'id' => $id
        ];

        $response = $this->client->exists($params);
        return $response;
    }

    /**
     * 删除文档
     * 说明：文档删除后，不会删除对应索引。
     */
    public function delete()
    {
        $params = [];
        $params['index'] = 'xiaochuan';
        $params['type'] = 'cat';
        $params['id'] = '20180407001';
        $res = $this->client->delete($params);
        halt($res);
    }
    /**
     * 删除索引：匹配单个 | 匹配多个
     * 说明： 索引删除后，索引下的所有文档也会被删除
     */
    public function deleteIndex()
    {
        $params = [];
        $params['index'] = 'test_index';  # 删除test_index单个索引
        #$params['index'] = 'test_index*'; # 删除以test_index开始的所有索引
        $res = $this->client->indices()->delete($params);
        halt($res);
    }
    /**
     * 部分更新文档
     */
    public function update1()
    {
        $params = [
            'index' => 'my_index',
            'type' => 'my_type',
            'id' => 'my_id',
            'body' => [
                'doc' => [
                    'new_field' => 'abc',
                    'count' => 1,
                    'counter' => 3
                ]
            ]
        ];
        // Update doc at /my_index/my_type/my_id
        $response = $this->client->update($params);
        print_r($response);
    }
    /**
     * script更新文档
     */
    public function update2()
    {
        $params = [
            'index' => 'my_index',
            'type' => 'my_type',
            'id' => 'my_id',
            'body' => [
                'script' => 'ctx._source.counter += count',
                'params' => [
                    'count' => 4
                ]
            ]
        ];

        $response = $this->client->update($params);
        print_r($response);
    }
    /**
     * upserts更新文档
     */
    public function update3()
    {
        $params = [
            'index' => 'my_index',
            'type' => 'my_type',
            'id' => 'my_id',
            'body' => [
                'script' => 'ctx._source.counter += count',
                'params' => [
                    'count' => 4
                ],
                'upsert' => [
                    'counter' => 1
                ]
            ]
        ];

        $response = $this->client->update($params);
        print_r($response);
    }

    /**
     * 搜索文档
     */
    public function search()
    {
        $params = [];
        $params['index'] = 'xiaochuan';
        $params['type']  = 'cat';
        $params['body']['query']['match']['name'] = '小川编程';
        $res = $this->client->search($params);
        halt($res);
    }

    //===============Elasticsearch 搜索测试===========================

    public function getSearch($keywords='国家'){
        $params = [
            'index' => 'tool_law_articles',
            'type' => '_doc',
            'body' => [
                'from' => 0,   //开始条数
                'size' => 2,  //每页数量
                'query'=>[  //搜索关键字
                    'bool' => [
                        'must' => [
                            [ 'match' => [ 'title' => [
                                'query' => $keywords,
                                'boost' => 3, // 权重大
                            ]]],
                            [ 'match' => [ 'descriptions' => [
                                'query' => $keywords,
                                'boost' => 2,
                            ]]],
                        ]
                    ]
                ],
                'highlight' => [  //高亮显示
                    'pre_tags' => ['<font color=\'red\'>'],  //highlight 的开始标签
                    'post_tags' => ['</font>'],        //highlight 的结束标签
                    'number_of_fragments' => 3,   //fragment 是指一段连续的文字。返回结果最多可以包含几段不连续的文字。默认是5。
                    'fragment_size' => 20000,    //一段 fragment 包含多少个字符。默认100。
                    'fields' =>[
                        'title' => new \stdClass(),
                        'descriptions' => new \stdClass(),
                    ]
                ],
                'sort' => [  // 字段排序
                    'law_id'=>['order'=>'desc']
                ],
                'aggs' => [  //分组聚合
                    'year' => [
                        'terms' => [
                            'field' => 'timeliness.keyword'
                        ]
                    ]
                ]
            ]
        ];
        $response = $this->client->search($params);
        halt($response);
        halt($response['hits']['hits'][0]['highlight']);

        #全文搜索
        #相当于sql语句:select*from ems_run_log where mac='fcd5d900beca' limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['match']['mac'] = '测试';
//        $index['size'] = 10;
//        $index['from'] = 200;

        #精确字段搜索
        #相当于sql语句:select*from ems_run_log where mac='fcd5d900beca' limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['match_phrase']['mac'] = 'fcd5d900beca';
//        $index['size'] = 10;
//        $index['from'] = 200;

        #高亮搜索结果
        #相当于sql语句:select*from ems_run_log where mac='fcd5d900beca' limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['match_phrase']['mac'] = 'fcd5d900beca';
//        $index['body']['highlight']['fields']['mac'] = {};
//        $index['size'] = 10;
//        $index['from'] = 200;

        #相当于sql语句:select*from ems_run_log where mac='fcd5d900beca' and product_id=20 limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['bool']['must'] = array(
//            array('match' => array('mac' => 'fcd5d900beca')),
//            array('match' => array('product_id' => 20))
//        );
//        $index['size'] = 10;
//        $index['from'] = 200;

        #相当于sql语句:select*from ems_run_log where mac!='fcd5d900beca' and product_id!=20 limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['bool']['must_not'] = array(
//            array('match' => array('mac' => 'fcd5d900beca')),
//            array('match' => array('product_id' => 20))
//        );
//        $index['size'] = 10;
//        $index['from'] = 200;

        #当于sql语句:select*from ems_run_log where mac='fcd5d900beca' or product_id=20 limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['bool']['should'] = array(
//            array('match' => array('mac' => 'fcd5d900beca')),
//            array('match' => array('product_id' => 20))
//        );
//        $index['size'] = 10;
//        $index['from'] = 200;


        #相当于sql语句:select*from ems_run_log where id>=20 and id<30  limit 200,10;
//        $index['index'] = 'log'; //索引名称
//        $index['type'] = 'ems_run_log'; //类型名称
//        $index['body']['query']['range'] = array(
//            'id' => array('gte' => 20,'lt' => 30)
//        );
//        $index['size'] = 10;
//        $index['from'] = 200;

//        $params = [
//            'index' => 'log', //索引名称
//            'type' => 'ems_run_log', //类型名称
//            'body' => [
//                'query' => [
//                    'constant_score' => [ //非评分模式执行
//                        'filter' => [ //过滤器，不会计算相关度，速度快
//                            'term' => [ //精确查找，不支持多个条件
//                                'about' => '谭'   //字段查找
//                            ]
//                        ]
//
//                    ]
//                ]
//            ]
//        ];

    }
}
